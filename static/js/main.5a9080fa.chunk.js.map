{"version":3,"sources":["logic.js","data.js","Quiz.js","SetupScreen.js","serviceWorker.js","index.js","App.js"],"names":["randomInt","end","Math","floor","random","shuffle","array","counter","length","index","temp","calculateChoices","answer","words","choices","includes","push","english","englishPronunciation","hindi","App","useState","history","setHistory","selectedAnswer","setSelectedAnswer","questions","setQuestions","currentQuestion","setChoices","correctAnswerTotal","correctAnswerCount","i","element","question","calculateCorrectAnswerTotal","map","choice","key","onClick","style","color","questionType","newQuestions","filter","_","handleConfirmAnswer","SetupScreen","setHasStarted","config","setConfig","Boolean","window","location","hostname","match","ReactDOM","render","hasStarted","questionCount","Quiz","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a9080fa.chunk.js","sourcesContent":["export function randomInt(end) {\n  return Math.floor(Math.random() * end);\n}\n\nexport function shuffle(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    const index = randomInt(counter);\n    counter--;\n    const temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\nexport function calculateChoices(answer, words) {\n  const choices = [answer];\n\n  while (choices.length !== 3) {\n    const index = randomInt(words.length);\n\n    if (!choices.includes(words[index])) {\n      choices.push(words[index]);\n    }\n  }\n\n  return shuffle(choices);\n}\n\nexport function calculateCorrectAnswerTotal(history) {\n  let correctAnswerCount = 0;\n\n  for (let i = 0; i < history.length; i++) {\n    const element = history[i];\n    if (element.answer === element.question) {\n      correctAnswerCount++;\n    }\n  }\n\n  return correctAnswerCount;\n}\n","export const words = [\n  {\n    english: \"Hello\",\n    englishPronunciation: \"Namaste\",\n    hindi: \"नमस्ते\"\n  },\n  {\n    english: \"One\",\n    englishPronunciation: \"Ek\",\n    hindi: \"एक\"\n  },\n  {\n    english: \"Two\",\n    englishPronunciation: \"Do\",\n    hindi: \"दो\"\n  },\n  {\n    english: \"Three\",\n    englishPronunciation: \"Teen\",\n    hindi: \"तीन\"\n  }\n];\n\nexport const phrases = [\n  {\n    english: \"I am ____\",\n    englishPronunciation: \"Mei ___ hoon(n)\",\n    hindi: \"मैं ___ हूँ\"\n  }\n];\n\n// export const letters = [\n//   {\n//     english: \"ka\",\n//     hindi: \"क\"\n//     ?exampleWordEnglish: '',\n//     ?exampleWordHindi: '\n//   }\n// ];\n","import React, { useState } from \"react\";\n\nimport {\n  shuffle,\n  calculateChoices,\n  calculateCorrectAnswerTotal\n} from \"./logic\";\nimport { words } from \"./data\";\n\nfunction App() {\n  const [history, setHistory] = useState([]);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [questions, setQuestions] = useState(shuffle([...words]));\n\n  const currentQuestion = questions[questions.length - 1];\n  const [choices, setChoices] = useState(\n    calculateChoices(currentQuestion, words)\n  );\n\n  const handleConfirmAnswer = (question, choices, answer) => () => {\n    setSelectedAnswer(null);\n    setHistory([\n      ...history,\n      {\n        questionType: \"WORD\",\n        question,\n        choices,\n        answer\n        // @Incomplete - whether the question was asked in english or hindi or english pronunciation\n      }\n    ]);\n\n    const newQuestions = questions.filter((_, i) => i !== questions.length - 1); // @Cleanup - probably a better way to do that\n    setQuestions(newQuestions);\n    setChoices(calculateChoices(newQuestions[newQuestions.length - 1], words));\n  };\n\n  const correctAnswerTotal = calculateCorrectAnswerTotal(history);\n\n  if (questions.length === 0) {\n    return (\n      <div>\n        <div>End of questions</div>\n        <div>Number of correct{correctAnswerTotal}</div>\n        <div>Total{history.length}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div>{currentQuestion.english}</div>\n      <br />\n      {choices.map((choice, i) => (\n        <div\n          key={i}\n          onClick={() => setSelectedAnswer(choice)}\n          style={{ color: selectedAnswer === choice ? \"red\" : \"black\" }}\n        >\n          {choice.englishPronunciation}\n        </div>\n      ))}\n      {selectedAnswer != null && (\n        <button\n          onClick={handleConfirmAnswer(\n            currentQuestion,\n            choices,\n            selectedAnswer\n          )}\n        >\n          Confirmation\n        </button>\n      )}\n      <br />\n      <br />\n      <br />\n      <div>Number of correct{correctAnswerTotal}</div>\n      <div>Total{history.length}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nexport default function SetupScreen({ setHasStarted, config, setConfig }) {\n  return (\n    <div>\n      <div>fsd</div>\n      <button onClick={() => setHasStarted(true)}>Start</button>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\n\nimport Quiz from \"./Quiz\";\nimport { words } from \"./data\";\nimport SetupScreen from \"./SetupScreen\";\n\nexport default function App() {\n  const [hasStarted, setHasStarted] = useState(false);\n  const [config, setConfig] = useState({\n    questionCount: words.length\n  });\n\n  if (hasStarted) {\n    return <Quiz />;\n  } else {\n    return (\n      <SetupScreen\n        setHasStarted={setHasStarted}\n        config={config}\n        setConfig={setConfig}\n      />\n    );\n  }\n}\n"],"sourceRoot":""}