{"version":3,"sources":["logic.js","History.js","Quiz.js","StartScreen.js","serviceWorker.js","index.js","App.js"],"names":["randomInt","end","Math","floor","random","shuffle","array","counter","length","index","temp","calculateChoices","answer","words","choiceCount","choices","includes","push","History","history","map","round","i","key","style","display","justifyContent","fontSize","question","type","choice","color","calculateRandomRoundType","roundType","int","Quiz","config","setHasStarted","useState","setHistory","setRoundType","slice","roundCount","questions","setQuestions","selectedAnswer","setSelectedAnswer","currentQuestion","setChoices","correctAnswerTotal","correctAnswerCount","element","calculateCorrectAnswerTotal","onClick","questionType","newQuestions","filter","_","handleConfirmAnswer","SetupScreen","setConfig","useEffect","keyPressHandler","window","addEventListener","removeEventListener","min","max","value","onChange","e","parseInt","currentTarget","Boolean","location","hostname","match","ReactDOM","render","hasStarted","target","rel","href","size","position","bottom","right","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.746bfb71.chunk.js","sourcesContent":["export function randomInt(end) {\n  return Math.floor(Math.random() * end);\n}\n\nexport function shuffle(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    const index = randomInt(counter);\n    counter--;\n    const temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\nexport function calculateChoices(answer, words, choiceCount) {\n  const choices = [answer];\n\n  while (choices.length !== choiceCount) {\n    const index = randomInt(words.length);\n\n    if (!choices.includes(words[index])) {\n      choices.push(words[index]);\n    }\n  }\n\n  return shuffle(choices);\n}\n\nexport function calculateCorrectAnswerTotal(history) {\n  let correctAnswerCount = 0;\n\n  for (let i = 0; i < history.length; i++) {\n    const element = history[i];\n    if (element.answer === element.question) {\n      correctAnswerCount++;\n    }\n  }\n\n  return correctAnswerCount;\n}\n","import React from \"react\";\n\nimport { TiTick } from \"react-icons/ti\";\nimport { GiSplitCross } from \"react-icons/gi\";\n\nexport default function History({ history }) {\n  if (history.length === 0) {\n    return <div>No History Yet</div>;\n  }\n\n  return (\n    <div>\n      {history.map((\n        round, // @Cleanup - round is different terminolgy\n        i\n      ) => (\n        <div\n          key={i}\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            fontSize: \"2em\"\n          }}\n        >\n          <span>{round.question[round.type[0]]}</span>\n          {round.choices.map((choice, i) => {\n            let color = \"black\";\n\n            if (choice === round.question) {\n              color = \"green\";\n            } else if (\n              choice === round.answer &&\n              round.answer !== round.question\n            ) {\n              color = \"red\";\n            }\n\n            return (\n              <span key={i} style={{ color }}>\n                {choice[round.type[1]]}\n              </span>\n            );\n          })}\n          {round.answer === round.question ? <TiTick /> : <GiSplitCross />}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport {\n  shuffle,\n  calculateChoices,\n  calculateCorrectAnswerTotal\n} from \"./logic\";\nimport words from \"./questions.json\"; // @Cleanup - bad name\nimport History from \"./History\";\n\n// @Cleanup - strings in the function should be constants\nfunction calculateRandomRoundType() {\n  const int = Math.floor(Math.random() * 2); // generates int between 0 and 5\n\n  let roundType;\n  if (int === 0) {\n    roundType = [\"hindi\", \"english\"];\n  } else if (int === 1) {\n    roundType = [\"english\", \"hindi\"];\n  }\n  // else if (int === 2) {\n  //   roundType = [\"english\", \"englishPronunciation\"];\n  // } else if (int === 3) {\n  //   roundType = [\"englishPronunciation\", \"english\"];\n  // }\n  // else if (int === 4) {\n  //   roundType = [\"hindi\", \"englishPronunciation\"];\n  // } else if (int === 5) {\n  //   roundType = [\"englishPronunciation\", \"hindi\"];\n  // }\n\n  return roundType;\n}\n\nfunction Quiz({ config, setHasStarted }) {\n  const [history, setHistory] = useState([]);\n  const [roundType, setRoundType] = useState(calculateRandomRoundType());\n  const [questions, setQuestions] = useState(\n    shuffle([...words]).slice(0, config.roundCount)\n  );\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n\n  const currentQuestion = questions[questions.length - 1];\n  const [choices, setChoices] = useState(\n    calculateChoices(currentQuestion, words, config.choiceCount)\n  );\n\n  const handleConfirmAnswer = (question, choices, answer) => () => {\n    setSelectedAnswer(null);\n    setHistory([\n      ...history,\n      {\n        questionType: \"WORD\",\n        question,\n        choices,\n        answer,\n        type: roundType\n        // @Incomplete - whether the question was asked in english or hindi or english pronunciation\n      }\n    ]);\n\n    const newQuestions = questions.filter((_, i) => i !== questions.length - 1); // @Cleanup - probably a better way to do that\n    setQuestions(newQuestions);\n    setChoices(\n      calculateChoices(\n        newQuestions[newQuestions.length - 1],\n        words,\n        config.choiceCount\n      )\n    );\n\n    setRoundType(calculateRandomRoundType());\n  };\n\n  const correctAnswerTotal = calculateCorrectAnswerTotal(history);\n\n  if (questions.length === 0) {\n    // @Cleanup - make results into new file\n    // @Cleanup - should this new file be rendered by App.js instead of Quiz.js\n\n    return (\n      <div>\n        <div>End of questions</div>\n        <div>Number of correct {correctAnswerTotal}</div>\n        <div>Total {history.length}</div>\n        <History history={history} />\n        <button onClick={() => setHasStarted(false)}>Restart</button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div>{currentQuestion[roundType[0]]}</div>\n      <br />\n      {choices.map((choice, i) => (\n        <div\n          key={i}\n          onClick={() => setSelectedAnswer(choice)}\n          style={{ color: selectedAnswer === choice ? \"red\" : \"black\" }}\n        >\n          {choice[roundType[1]]}\n        </div>\n      ))}\n      {selectedAnswer != null && (\n        <button\n          onClick={handleConfirmAnswer(\n            currentQuestion,\n            choices,\n            selectedAnswer\n          )}\n        >\n          Confirmation\n        </button>\n      )}\n      <br />\n      <br />\n      <br />\n      <div>Number of correct {correctAnswerTotal}</div>\n      <div>Total {history.length}</div>\n      <div>Out of {config.roundCount}</div>\n      <br />\n      <br />\n      <br />\n      <History history={history} />\n      <button onClick={() => setHasStarted(false)}>Restart</button>\n    </div>\n  );\n}\n\nexport default Quiz;\n","import React, { useEffect } from \"react\";\n\nimport words from \"./questions.json\"; // @Cleanup - words is a bad name\n\nexport default function SetupScreen({ setHasStarted, config, setConfig }) {\n  useEffect(() => {\n    const keyPressHandler = ({ key }) => key === \"Enter\" && setHasStarted(true);\n\n    window.addEventListener(\"keydown\", keyPressHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", keyPressHandler);\n    };\n  }, [setHasStarted]);\n\n  return (\n    <div>\n      <div>Hindi Flashcards</div>\n      <br />\n      <br />\n      <br />\n      How many Questions?\n      <div>\n        <input\n          type=\"range\"\n          min={1}\n          max={words.length}\n          value={config.roundCount}\n          onChange={e =>\n            setConfig({\n              ...config,\n              roundCount: parseInt(e.currentTarget.value)\n            })\n          }\n        />\n        {config.roundCount}\n      </div>\n      How many multiple choice answers?\n      <div>\n        <input\n          type=\"range\"\n          min={2}\n          max={8}\n          value={config.choiceCount}\n          onChange={e =>\n            setConfig({\n              ...config,\n              choiceCount: parseInt(e.currentTarget.value)\n            })\n          }\n        />\n        {config.choiceCount}\n      </div>\n      <button onClick={() => setHasStarted(true)}>Start</button>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\n\nimport Quiz from \"./Quiz\";\nimport words from \"./questions.json\";\nimport StartScreen from \"./StartScreen\";\n\nexport default function App() {\n  const [hasStarted, setHasStarted] = useState(false);\n  const [config, setConfig] = useState({\n    roundCount: words.length,\n    choiceCount: 3\n  });\n\n  const renderScreen = () => {\n    if (hasStarted) {\n      return <Quiz config={config} setHasStarted={setHasStarted} />;\n    } else {\n      return (\n        <StartScreen\n          setHasStarted={setHasStarted}\n          config={config}\n          setConfig={setConfig}\n        />\n      );\n    }\n  };\n\n  return (\n    <div>\n      {renderScreen()}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.github.com/taq2/hindi-flashcards\"\n      >\n        <FaGithub\n          size=\"4em\"\n          style={{ position: \"fixed\", bottom: 10, right: 10, color: \"black\" }}\n        />\n      </a>\n    </div>\n  );\n}\n"],"sourceRoot":""}