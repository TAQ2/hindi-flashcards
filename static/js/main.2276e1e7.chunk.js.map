{"version":3,"sources":["logic.js","theme.js","Button.js","History.js","Quiz.js","StartScreen.js","serviceWorker.js","index.js","App.js"],"names":["randomInt","end","Math","floor","random","shuffle","array","counter","length","index","temp","calculateChoices","answer","words","choiceCount","choices","includes","push","calculateCorrectAnswerTotal","history","correctAnswerCount","i","element","question","colours","screenBreakpoints","styled","button","disabled","isSmall","LargeContainer","div","SmallContainer","Thing","History","handleExitHistory","isResults","ActionButton","Button","onClick","style","position","top","right","fontSize","color","cursor","padding","margin","maxWidth","display","flexDirection","minHeight","textAlign","map","round","key","width","fontWeight","type","choice","ResultsContainer","QuestionWord","Choice","ChoicesContainer","calculateRandomRoundType","roundType","int","Quiz","config","setHasStarted","useState","setHistory","setRoundType","slice","roundCount","questions","setQuestions","selectedAnswer","setSelectedAnswer","displayHistory","setDisplayHistory","currentQuestion","setChoices","handleConfirmAnswer","questionType","newQuestions","filter","_","useEffect","keyPressHandler","window","addEventListener","removeEventListener","correctAnswerTotal","marginRight","paddingTop","height","justifyContent","marginLeft","borderBottom","marginBottom","Title","Slider","input","SetupScreen","setConfig","min","max","value","onChange","e","parseInt","currentTarget","Boolean","location","hostname","match","ReactDOM","render","hasStarted","ceil","backgroundColor","target","rel","href","bottom","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2276e1e7.chunk.js","sourcesContent":["export function randomInt(end) {\n  return Math.floor(Math.random() * end);\n}\n\nexport function shuffle(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    const index = randomInt(counter);\n    counter--;\n    const temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\nexport function calculateChoices(answer, words, choiceCount) {\n  const choices = [answer];\n\n  while (choices.length !== choiceCount) {\n    const index = randomInt(words.length);\n\n    if (!choices.includes(words[index])) {\n      choices.push(words[index]);\n    }\n  }\n\n  return shuffle(choices);\n}\n\nexport function calculateCorrectAnswerTotal(history) {\n  let correctAnswerCount = 0;\n\n  for (let i = 0; i < history.length; i++) {\n    const element = history[i];\n    if (element.answer === element.question) {\n      correctAnswerCount++;\n    }\n  }\n\n  return correctAnswerCount;\n}\n","// https://coolors.co/3066be-119da4-6d9dc5-80ded9-aeecef\n\nexport const colours = {\n  primary: \"rgb(48, 102, 190)\",\n  secondary: \"rgb(17, 157, 164)\",\n  tertiary: \"rgb(109, 157, 197)\",\n  quaternary: \"rgb(128, 222, 217)\",\n  quinary: \"rgb(174, 236, 239)\"\n};\n\nexport const screenBreakpoints = {\n  small: 576,\n  tablet: 750,\n  desktop: 900,\n  maxContentWidth: 1050\n};\n","import styled from \"styled-components\";\nimport { colours } from \"./theme\";\n\nexport default styled.button`\n  background-color: ${colours.quinary};\n  border-radius: 5px;\n  color: ${({ disabled }) => (disabled ? \"gray\" : colours.secondary)};\n  padding: 0.2rem 1rem;\n  cursor: ${({ disabled }) => (disabled ? \"auto\" : \"pointer\")};\n  border: ${({ isSmall }) => (isSmall ? 2 : 4)}px solid;\n  font-size: ${({ isSmall }) => (isSmall ? 1 : 2)}rem;\n`;\n","import React from \"react\";\nimport { FaTimes } from \"react-icons/fa\";\nimport styled from \"styled-components\";\n\nimport Button from \"./Button\";\nimport { colours, screenBreakpoints } from \"./theme\";\nimport { calculateCorrectAnswerTotal } from \"./logic\";\n\nconst LargeContainer = styled.div`\n  padding-top: 4rem;\n\n  @media (max-width: ${screenBreakpoints.maxContentWidth}px) {\n    padding-left: 4rem;\n    padding-right: 4rem;\n  }\n\n  @media (max-width: 900px) {\n    font-size: 0.7rem;\n  }\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    display: none;\n  }\n`;\n\n// @Cleanup - can we consolodate small and large container childrens\nconst SmallContainer = styled.div`\n  text-align: center;\n  padding-top: 1rem;\n\n  @media (min-width: ${screenBreakpoints.tablet + 1}px) {\n    display: none;\n  }\n`;\n\n// @Cleanup\nconst Thing = styled.div`\n  display: flex;\n  justify-content: center;\n\n  @media (max-width: ${screenBreakpoints.small}px) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nexport default function History({ history, handleExitHistory, isResults }) {\n  const ActionButton = isResults\n    ? () => (\n        <Button\n          onClick={handleExitHistory}\n          isSmall\n          style={{\n            position: \"absolute\",\n            top: 10,\n            right: 10\n          }}\n        >\n          Restart\n        </Button>\n      )\n    : () => (\n        <FaTimes\n          onClick={handleExitHistory}\n          style={{\n            position: \"absolute\",\n            top: 10,\n            right: 10,\n            fontSize: \"3rem\",\n            color: \"gray\",\n            cursor: \"pointer\"\n          }}\n        />\n      );\n\n  return (\n    <>\n      <ActionButton />\n      <div\n        style={{\n          padding: \"4rem 0\",\n          margin: \"0 auto\",\n          maxWidth: screenBreakpoints.maxContentWidth,\n          display: \"flex\",\n          flexDirection: \"column\",\n          minHeight: \"100vh\"\n        }}\n      >\n        {isResults && (\n          <div style={{ fontSize: \"2rem\", textAlign: \"center\" }}>\n            Congratulations! You got {calculateCorrectAnswerTotal(history)} out\n            of {history.length} correct.\n          </div>\n        )}\n        <LargeContainer>\n          {history.map((\n            round, // @Cleanup - round is different terminolgy\n            i\n          ) => (\n            <div\n              key={i}\n              style={{\n                display: \"flex\",\n                fontSize: \"2em\",\n                color: colours.primary\n              }}\n            >\n              <span style={{ width: \"20%\", fontWeight: \"bold\" }}>\n                {round.question[round.type[0]]}\n              </span>\n              {round.choices.map((choice, i) => {\n                let color = colours.primary;\n\n                if (choice === round.question) {\n                  color = \"green\";\n                } else if (\n                  choice === round.answer &&\n                  round.answer !== round.question\n                ) {\n                  color = \"red\";\n                }\n\n                return (\n                  <span key={i} style={{ width: \"20%\", color }}>\n                    {choice[round.type[1]]}\n                  </span>\n                );\n              })}\n            </div>\n          ))}\n        </LargeContainer>\n\n        <SmallContainer>\n          {history.map((\n            round, // @Cleanup - round is different terminolgy\n            i\n          ) => (\n            <div\n              key={i}\n              style={{\n                margin: \"1rem 0\",\n                padding: \"1rem 0\"\n              }}\n            >\n              <div\n                style={{\n                  fontSize: \"1.5em\",\n                  fontWeight: \"bold\",\n                  color: colours.primary\n                }}\n              >\n                {round.question[round.type[0]]}\n              </div>\n              <Thing>\n                {round.choices.map((choice, i) => {\n                  let color = colours.primary;\n\n                  if (choice === round.question) {\n                    color = \"green\";\n                  } else if (\n                    choice === round.answer &&\n                    round.answer !== round.question\n                  ) {\n                    color = \"red\";\n                  }\n\n                  return (\n                    <span\n                      key={i}\n                      style={{ width: \"25%\", color, fontSize: \"1.5rem\" }}\n                    >\n                      {choice[round.type[1]]}\n                    </span>\n                  );\n                })}\n              </Thing>\n            </div>\n          ))}\n        </SmallContainer>\n      </div>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { FaTimes, FaCheck } from \"react-icons/fa\";\n\nimport {\n  shuffle,\n  calculateChoices,\n  calculateCorrectAnswerTotal\n} from \"./logic\";\nimport words from \"./questions.json\"; // @Cleanup - bad name\nimport History from \"./History\";\nimport { colours, screenBreakpoints } from \"./theme\";\nimport Button from \"./Button\";\n\nconst ResultsContainer = styled.div`\n  font-size: 2rem;\n  display: flex;\n  align-items: center;\n  color: ${colours.tertiary};\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    margin-bottom: 2rem;\n  }\n`;\n\nconst QuestionWord = styled.div`\n  color: ${colours.primary};\n  // margin-bottom: 10rem;\n  font-size: 7rem;\n  // set lineheight because the set default between english and hindi is different @Cleanup\n  line-height: 8rem;\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    margin-bottom: 5rem;\n    font-size: 6rem;\n    // set lineheight because the set default between english and hindi is different @Cleanup\n    line-height: 6rem;\n  }\n\n  @media (max-width: ${screenBreakpoints.small}px) {\n    margin-bottom: 3rem;\n    font-size: 5rem;\n    // set lineheight because the set default between english and hindi is different @Cleanup\n    line-height: 5rem;\n  }\n`;\n\nconst Choice = styled.div`\n  font-size: 3rem;\n  line-height: 3rem;\n  cursor: pointer;\n  padding: 0 1rem;\n  width: 22%;\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    margin-bottom: 1rem;\n    width: 100%;\n  }\n`;\n\nconst ChoicesContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  color: ${colours.tertiary};\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    flex-direction: column;\n    margin: 0 auto;\n  }\n`;\n\n// @Cleanup - strings in the function should be constants\n// @Cleanup - put in logic file\nfunction calculateRandomRoundType() {\n  const int = Math.floor(Math.random() * 2); // generates int between 0 and 5\n\n  let roundType;\n  if (int === 0) {\n    roundType = [\"hindi\", \"english\"];\n  } else if (int === 1) {\n    roundType = [\"english\", \"hindi\"];\n  }\n  // else if (int === 2) {\n  //   roundType = [\"english\", \"englishPronunciation\"];\n  // } else if (int === 3) {\n  //   roundType = [\"englishPronunciation\", \"english\"];\n  // }\n  // else if (int === 4) {\n  //   roundType = [\"hindi\", \"englishPronunciation\"];\n  // } else if (int === 5) {\n  //   roundType = [\"englishPronunciation\", \"hindi\"];\n  // }\n\n  return roundType;\n}\n\nfunction Quiz({ config, setHasStarted }) {\n  const [history, setHistory] = useState([]);\n  const [roundType, setRoundType] = useState(calculateRandomRoundType());\n  const [questions, setQuestions] = useState(\n    shuffle([...words]).slice(0, config.roundCount)\n  );\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n\n  const [displayHistory, setDisplayHistory] = useState(false);\n\n  const currentQuestion = questions[questions.length - 1];\n  const [choices, setChoices] = useState(\n    calculateChoices(currentQuestion, words, config.choiceCount)\n  );\n\n  const handleConfirmAnswer = () => () => {\n    setHistory([\n      ...history,\n      {\n        questionType: \"WORD\",\n        question: currentQuestion,\n        choices,\n        answer: selectedAnswer,\n        type: roundType\n        // @Incomplete - whether the question was asked in english or hindi or english pronunciation\n      }\n    ]);\n\n    setSelectedAnswer(null);\n    const newQuestions = questions.filter((_, i) => i !== questions.length - 1); // @Cleanup - probably a better way to do that\n    setQuestions(newQuestions);\n    setChoices(\n      calculateChoices(\n        newQuestions[newQuestions.length - 1],\n        words,\n        config.choiceCount\n      )\n    );\n\n    setRoundType(calculateRandomRoundType());\n  };\n\n  useEffect(() => {\n    const keyPressHandler = ({ key }) =>\n      key === \"Enter\" && selectedAnswer !== null && handleConfirmAnswer()();\n    window.addEventListener(\"keydown\", keyPressHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", keyPressHandler);\n    };\n\n    // @Cleanup - https://stackoverflow.com/questions/55840294/how-to-fix-missing-dependency-warning-when-using-useeffect-react-hook\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedAnswer]);\n\n  const correctAnswerTotal = calculateCorrectAnswerTotal(history);\n\n  if (displayHistory) {\n    return (\n      <History\n        history={history}\n        handleExitHistory={() => setDisplayHistory(false)}\n      />\n    );\n  }\n  if (questions.length === 0) {\n    return (\n      <History\n        history={history}\n        handleExitHistory={() => setHasStarted(false)}\n        isResults\n      />\n    );\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          position: \"absolute\",\n          top: 10,\n          right: 10\n        }}\n      >\n        <Button\n          onClick={() => setDisplayHistory(true)}\n          isSmall\n          style={{ marginRight: \"0.7rem\" }}\n          disabled={history.length === 0}\n        >\n          History\n        </Button>\n        <Button onClick={() => setHasStarted(false)} isSmall>\n          Restart\n        </Button>\n      </div>\n      <div\n        style={{\n          textAlign: \"center\",\n          maxWidth: screenBreakpoints.maxContentWidth,\n          margin: \"0 auto\",\n          paddingTop: \"4rem\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"100vh\"\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-between\",\n            height: \"100%\"\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\"\n            }}\n          >\n            <ResultsContainer>\n              <FaCheck />\n              <span\n                style={{\n                  marginLeft: \"1rem\",\n                  marginRight: \"3rem\"\n                }}\n              >\n                {correctAnswerTotal}\n              </span>\n              <FaTimes />\n              <span style={{ marginLeft: \"1rem\" }}>\n                {history.length - correctAnswerTotal}\n              </span>\n            </ResultsContainer>\n          </div>\n          <QuestionWord>{currentQuestion[roundType[0]]}</QuestionWord>\n\n          <ChoicesContainer>\n            {choices.map((choice, i) => (\n              <Choice key={i} onClick={() => setSelectedAnswer(choice)}>\n                <div\n                  style={{\n                    borderBottom:\n                      selectedAnswer === choice ? \"2px solid\" : \"none\",\n                    display: \"inline\"\n                  }}\n                >\n                  {choice[roundType[1]]}\n                </div>\n              </Choice>\n            ))}\n          </ChoicesContainer>\n          <div />\n          <div style={{ marginBottom: \"2rem\" }}>\n            <Button\n              onClick={handleConfirmAnswer(\n                currentQuestion,\n                choices,\n                selectedAnswer\n              )}\n              disabled={selectedAnswer == null}\n            >\n              Confirm\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Quiz;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport { colours, screenBreakpoints } from \"./theme\";\nimport words from \"./questions.json\"; // @Cleanup - words is a bad name\nimport Button from \"./Button\";\n\nconst Title = styled.div`\n  font-size: 5rem;\n  font-weight: bold;\n  color: ${colours.primary};\n  text-decoration: underline;\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    font-size: 3rem;\n  }\n\n  @media (max-width: ${screenBreakpoints.small}px) {\n    font-size: 2.5rem;\n  }\n`;\n\nconst Slider = styled.input`\n  width: 500px;\n  margin-bottom: 2rem;\n  cursor: pointer;\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    width: 400px;\n  }\n\n  @media (max-width: ${screenBreakpoints.small}px) {\n    width: 70%;\n  }\n`;\n\nexport default function SetupScreen({ setHasStarted, config, setConfig }) {\n  useEffect(() => {\n    const keyPressHandler = ({ key }) => key === \"Enter\" && setHasStarted(true);\n\n    window.addEventListener(\"keydown\", keyPressHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", keyPressHandler);\n    };\n  }, [setHasStarted]);\n\n  return (\n    <div // @Cleanup - move this container to App.js?\n      style={{\n        textAlign: \"center\",\n        maxWidth: screenBreakpoints.maxContentWidth,\n        margin: \"0 auto\",\n        paddingTop: \"4rem\",\n        height: \"100vh\"\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexDirection: \"column\",\n          height: \"100%\"\n        }}\n      >\n        <Title>Hindi Flashcards</Title>\n        <div style={{ marginBottom: \"3rem\" }}>\n          <div\n            style={{\n              fontSize: \"1.5rem\",\n              color: colours.primary,\n              marginBottom: \"1rem\"\n            }}\n          >\n            {config.roundCount} Questions\n          </div>\n          <div>\n            <Slider\n              type=\"range\"\n              min={1}\n              max={words.length}\n              value={config.roundCount}\n              onChange={e =>\n                setConfig({\n                  ...config,\n                  roundCount: parseInt(e.currentTarget.value)\n                })\n              }\n            />\n          </div>\n          {/* <div\n        style={{\n          fontSize: \"1.5rem\",\n          color: colours.primary,\n          marginBottom: \"1rem\"\n        }}\n      >\n        {config.choiceCount} Multiple Choice Answers\n      </div>\n      <div>\n        <input\n          style={{\n            width: \"35%\",\n            marginBottom: \"3rem\",\n            cursor: \"pointer\"\n          }}\n          type=\"range\"\n          min={2}\n          max={8}\n          value={config.choiceCount}\n          onChange={e =>\n            setConfig({\n              ...config,\n              choiceCount: parseInt(e.currentTarget.value)\n            })\n          }\n        />\n      </div> */}\n        </div>\n        <div style={{ marginBottom: \"2rem\" }}>\n          <Button onClick={() => setHasStarted(true)}>Start</Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\n\nimport Quiz from \"./Quiz\";\nimport words from \"./questions.json\";\nimport StartScreen from \"./StartScreen\";\nimport { colours } from \"./theme\";\n\nexport default function App() {\n  const [hasStarted, setHasStarted] = useState(false);\n  const [config, setConfig] = useState({\n    roundCount: Math.ceil(words.length / 2),\n    choiceCount: 4\n  });\n\n  const renderScreen = () => {\n    if (hasStarted) {\n      return <Quiz config={config} setHasStarted={setHasStarted} />;\n    } else {\n      return (\n        <StartScreen\n          setHasStarted={setHasStarted}\n          config={config}\n          setConfig={setConfig}\n        />\n      );\n    }\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: colours.quinary,\n        width: \"100vw\",\n        minHeight: \"100vh\"\n      }}\n    >\n      {renderScreen()}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.github.com/taq2/hindi-flashcards\"\n      >\n        <FaGithub\n          style={{\n            position: \"fixed\",\n            bottom: 10,\n            right: 10,\n            color: \"black\",\n            fontSize: \"3rem\"\n          }}\n        />\n      </a>\n    </div>\n  );\n}\n"],"sourceRoot":""}