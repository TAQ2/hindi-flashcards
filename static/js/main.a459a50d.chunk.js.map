{"version":3,"sources":["logic.js","History.js","theme.js","Quiz.js","StartScreen.js","serviceWorker.js","index.js","App.js"],"names":["randomInt","end","Math","floor","random","shuffle","array","counter","length","index","temp","calculateChoices","answer","words","choiceCount","choices","includes","push","History","history","handleExitHistory","style","position","top","right","fontSize","color","border","background","cursor","onClick","paddingTop","map","round","i","key","display","justifyContent","question","type","choice","colours","screenBreakpoints","Choice","styled","div","isSelected","ChoicesContainer","calculateRandomRoundType","roundType","int","Quiz","config","setHasStarted","useState","setHistory","setRoundType","slice","roundCount","questions","setQuestions","selectedAnswer","setSelectedAnswer","displayHistory","setDisplayHistory","currentQuestion","setChoices","correctAnswerTotal","correctAnswerCount","element","calculateCorrectAnswerTotal","backgroundColor","borderRadius","padding","marginRight","textAlign","maxWidth","margin","marginBottom","lineHeight","questionType","newQuestions","filter","_","handleConfirmAnswer","disabled","Title","Slider","input","SetupScreen","setConfig","useEffect","keyPressHandler","window","addEventListener","removeEventListener","min","max","value","onChange","e","parseInt","currentTarget","Boolean","location","hostname","match","ReactDOM","render","hasStarted","ceil","width","height","target","rel","href","bottom","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a459a50d.chunk.js","sourcesContent":["export function randomInt(end) {\n  return Math.floor(Math.random() * end);\n}\n\nexport function shuffle(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    const index = randomInt(counter);\n    counter--;\n    const temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\nexport function calculateChoices(answer, words, choiceCount) {\n  const choices = [answer];\n\n  while (choices.length !== choiceCount) {\n    const index = randomInt(words.length);\n\n    if (!choices.includes(words[index])) {\n      choices.push(words[index]);\n    }\n  }\n\n  return shuffle(choices);\n}\n\nexport function calculateCorrectAnswerTotal(history) {\n  let correctAnswerCount = 0;\n\n  for (let i = 0; i < history.length; i++) {\n    const element = history[i];\n    if (element.answer === element.question) {\n      correctAnswerCount++;\n    }\n  }\n\n  return correctAnswerCount;\n}\n","import React from \"react\";\n\nimport { TiTick } from \"react-icons/ti\";\nimport { GiSplitCross } from \"react-icons/gi\";\n\nexport default function History({ history, handleExitHistory }) {\n  return (\n    <>\n      <button\n        style={{\n          position: \"absolute\",\n          top: 10,\n          right: 10,\n          fontSize: \"3rem\",\n          color: \"gray\",\n          border: \"none\",\n          background: \"transparent\",\n          cursor: \"pointer\"\n        }}\n        onClick={handleExitHistory}\n      >\n        X\n      </button>\n      <div\n        style={{\n          paddingTop: \"6rem\"\n        }}\n      >\n        {history.map((\n          round, // @Cleanup - round is different terminolgy\n          i\n        ) => (\n          <div\n            key={i}\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              fontSize: \"2em\"\n            }}\n          >\n            <span>{round.question[round.type[0]]}</span>\n            {round.choices.map((choice, i) => {\n              let color = \"black\";\n\n              if (choice === round.question) {\n                color = \"green\";\n              } else if (\n                choice === round.answer &&\n                round.answer !== round.question\n              ) {\n                color = \"red\";\n              }\n\n              return (\n                <span key={i} style={{ color }}>\n                  {choice[round.type[1]]}\n                </span>\n              );\n            })}\n            {round.answer === round.question ? <TiTick /> : <GiSplitCross />}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n","// https://coolors.co/3066be-119da4-6d9dc5-80ded9-aeecef\n\nexport const colours = {\n  primary: \"rgb(48, 102, 190)\",\n  secondary: \"rgb(17, 157, 164)\",\n  tertiary: \"rgb(109, 157, 197)\",\n  quaternary: \"rgb(128, 222, 217)\",\n  quinary: \"rgb(174, 236, 239)\"\n};\n\nexport const screenBreakpoints = {\n  small: 576,\n  tablet: 750,\n  desktop: 900,\n  maxContentWidth: 1050\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  shuffle,\n  calculateChoices,\n  calculateCorrectAnswerTotal\n} from \"./logic\";\nimport words from \"./questions.json\"; // @Cleanup - bad name\nimport History from \"./History\";\nimport { colours, screenBreakpoints } from \"./theme\";\n\nconst Choice = styled.div`\n  text-decoration: ${({ isSelected }) => (isSelected ? \"underline\" : \"none\")};\n  font-size: 2rem;\n  // set lineheight because the set default between english and hindi is different\n  line-height: 3rem;\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    margin-bottom: 1rem;\n  }\n`;\n\nconst ChoicesContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin: 0 4rem 8rem 4rem;\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    flex-direction: column;\n  }\n`;\n\n// @Cleanup - strings in the function should be constants\n// @Cleanup - put in logic file\nfunction calculateRandomRoundType() {\n  const int = Math.floor(Math.random() * 2); // generates int between 0 and 5\n\n  let roundType;\n  if (int === 0) {\n    roundType = [\"hindi\", \"english\"];\n  } else if (int === 1) {\n    roundType = [\"english\", \"hindi\"];\n  }\n  // else if (int === 2) {\n  //   roundType = [\"english\", \"englishPronunciation\"];\n  // } else if (int === 3) {\n  //   roundType = [\"englishPronunciation\", \"english\"];\n  // }\n  // else if (int === 4) {\n  //   roundType = [\"hindi\", \"englishPronunciation\"];\n  // } else if (int === 5) {\n  //   roundType = [\"englishPronunciation\", \"hindi\"];\n  // }\n\n  return roundType;\n}\n\nfunction Quiz({ config, setHasStarted }) {\n  const [history, setHistory] = useState([]);\n  const [roundType, setRoundType] = useState(calculateRandomRoundType());\n  const [questions, setQuestions] = useState(\n    shuffle([...words]).slice(0, config.roundCount)\n  );\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n\n  const [displayHistory, setDisplayHistory] = useState(false);\n\n  const currentQuestion = questions[questions.length - 1];\n  const [choices, setChoices] = useState(\n    calculateChoices(currentQuestion, words, config.choiceCount)\n  );\n\n  const handleConfirmAnswer = (question, choices, answer) => () => {\n    setSelectedAnswer(null);\n    setHistory([\n      ...history,\n      {\n        questionType: \"WORD\",\n        question,\n        choices,\n        answer,\n        type: roundType\n        // @Incomplete - whether the question was asked in english or hindi or english pronunciation\n      }\n    ]);\n\n    const newQuestions = questions.filter((_, i) => i !== questions.length - 1); // @Cleanup - probably a better way to do that\n    setQuestions(newQuestions);\n    setChoices(\n      calculateChoices(\n        newQuestions[newQuestions.length - 1],\n        words,\n        config.choiceCount\n      )\n    );\n\n    setRoundType(calculateRandomRoundType());\n  };\n\n  const correctAnswerTotal = calculateCorrectAnswerTotal(history);\n\n  if (displayHistory) {\n    return (\n      <History\n        history={history}\n        handleExitHistory={() => setDisplayHistory(false)}\n      />\n    );\n  }\n\n  if (questions.length === 0) {\n    // @Cleanup - make results into new file\n    // @Cleanup - should this new file be rendered by App.js instead of Quiz.js\n\n    return (\n      <div>\n        <div>End of questions</div>\n        <div>Number of correct {correctAnswerTotal}</div>\n        <div>Total {history.length}</div>\n        <History history={history} />\n        <button onClick={() => setHasStarted(false)}>Restart</button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          position: \"absolute\",\n          top: 10,\n          right: 10\n        }}\n      >\n        <button\n          onClick={() => setDisplayHistory(true)}\n          style={{\n            // @Cleanup - the following style is copied from button on start page\n            fontSize: \"1rem\",\n            border: \"2px solid \" + colours.secondary,\n            backgroundColor: colours.quinary,\n            borderRadius: 5,\n            color: colours.secondary,\n            padding: \"0.2rem 1rem\",\n            cursor: \"pointer\",\n            marginRight: \"0.7rem\"\n          }}\n        >\n          History\n        </button>\n        <button\n          onClick={() => setHasStarted(false)}\n          style={{\n            // @Cleanup - the following style is copied from button on start page\n            fontSize: \"1rem\",\n            border: \"2px solid \" + colours.secondary,\n            backgroundColor: colours.quinary,\n            borderRadius: 5,\n            color: colours.secondary,\n            padding: \"0.2rem 1rem\",\n            cursor: \"pointer\"\n          }}\n        >\n          Restart\n        </button>\n      </div>\n      <div\n        style={{\n          textAlign: \"center\",\n          maxWidth: screenBreakpoints.maxContentWidth,\n          margin: \"0 auto\",\n          paddingTop: \"4rem\"\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-around\",\n            marginBottom: \"4rem\"\n          }}\n        >\n          <div>Correct answers {correctAnswerTotal}</div>\n          <div>\n            {history.length + 1} out of {config.roundCount} questions\n          </div>\n        </div>\n        <div\n          style={{\n            fontSize: \"5rem\",\n            marginBottom: \"8rem\",\n            // set lineheight because the set default between english and hindi is different\n            lineHeight: \"7rem\"\n          }}\n        >\n          {currentQuestion[roundType[0]]}\n        </div>\n        <ChoicesContainer>\n          {choices.map((choice, i) => (\n            <Choice\n              key={i}\n              onClick={() => setSelectedAnswer(choice)}\n              isSelected={selectedAnswer === choice}\n            >\n              {choice[roundType[1]]}\n            </Choice>\n          ))}\n        </ChoicesContainer>\n\n        <button\n          onClick={handleConfirmAnswer(\n            currentQuestion,\n            choices,\n            selectedAnswer\n          )}\n          disabled={selectedAnswer == null}\n          style={{\n            // @Cleanup - other buttons are the same style\n            fontSize: \"2rem\",\n            backgroundColor: colours.quinary,\n            borderRadius: 5,\n            border:\n              \"4px solid \" +\n              (selectedAnswer != null ? colours.secondary : \"gray\"),\n            color: selectedAnswer != null ? colours.secondary : \"gray\",\n            padding: \"0.2rem 1rem\",\n            cursor: selectedAnswer != null ? \"pointer\" : \"auto\"\n          }}\n        >\n          Confirm\n        </button>\n        {/* <History history={history} /> */}\n      </div>\n    </>\n  );\n}\n\nexport default Quiz;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport { colours, screenBreakpoints } from \"./theme\";\nimport words from \"./questions.json\"; // @Cleanup - words is a bad name\n\nconst Title = styled.div`\n  font-size: 4rem;\n  font-weight: bold;\n  margin-bottom: 4rem;\n  color: ${colours.primary};\n  text-decoration: underline;\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    font-size: 3rem;\n  }\n\n  @media (max-width: ${screenBreakpoints.small}px) {\n    font-size: 2.5rem;\n  }\n`;\n\nconst Slider = styled.input`\n  width: 500px;\n  margin-bottom: 2rem;\n  cursor: pointer;\n\n  @media (max-width: ${screenBreakpoints.tablet}px) {\n    width: 400px;\n  }\n\n  @media (max-width: ${screenBreakpoints.small}px) {\n    width: 70%;\n  }\n`;\n\nexport default function SetupScreen({ setHasStarted, config, setConfig }) {\n  useEffect(() => {\n    const keyPressHandler = ({ key }) => key === \"Enter\" && setHasStarted(true);\n\n    window.addEventListener(\"keydown\", keyPressHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", keyPressHandler);\n    };\n  }, [setHasStarted]);\n\n  return (\n    <div // @Cleanup - move this container to App.js?\n      style={{\n        textAlign: \"center\",\n        maxWidth: screenBreakpoints.maxContentWidth,\n        margin: \"0 auto\",\n        paddingTop: \"4rem\"\n      }}\n    >\n      <Title>Hindi Flashcards</Title>\n      <div style={{ marginBottom: \"3rem\" }}>\n        <div\n          style={{\n            fontSize: \"1.5rem\",\n            color: colours.primary,\n            marginBottom: \"1rem\"\n          }}\n        >\n          {config.roundCount} Questions\n        </div>\n        <div>\n          <Slider\n            type=\"range\"\n            min={1}\n            max={words.length}\n            value={config.roundCount}\n            onChange={e =>\n              setConfig({\n                ...config,\n                roundCount: parseInt(e.currentTarget.value)\n              })\n            }\n          />\n        </div>\n        {/* <div\n        style={{\n          fontSize: \"1.5rem\",\n          color: colours.primary,\n          marginBottom: \"1rem\"\n        }}\n      >\n        {config.choiceCount} Multiple Choice Answers\n      </div>\n      <div>\n        <input\n          style={{\n            width: \"35%\",\n            marginBottom: \"3rem\",\n            cursor: \"pointer\"\n          }}\n          type=\"range\"\n          min={2}\n          max={8}\n          value={config.choiceCount}\n          onChange={e =>\n            setConfig({\n              ...config,\n              choiceCount: parseInt(e.currentTarget.value)\n            })\n          }\n        />\n      </div> */}\n      </div>\n      <button\n        onClick={() => setHasStarted(true)}\n        style={{\n          fontSize: \"2rem\",\n          backgroundColor: colours.quinary,\n          borderRadius: 5,\n          border: \"4px solid \" + colours.secondary,\n          color: colours.secondary,\n          padding: \"0.2rem 1rem\",\n          cursor: \"pointer\"\n        }}\n      >\n        Start\n      </button>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\n\nimport Quiz from \"./Quiz\";\nimport words from \"./questions.json\";\nimport StartScreen from \"./StartScreen\";\nimport { colours } from \"./theme\";\n\nexport default function App() {\n  const [hasStarted, setHasStarted] = useState(false);\n  const [config, setConfig] = useState({\n    roundCount: Math.ceil(words.length / 2),\n    choiceCount: 4\n  });\n\n  const renderScreen = () => {\n    if (hasStarted) {\n      return <Quiz config={config} setHasStarted={setHasStarted} />;\n    } else {\n      return (\n        <StartScreen\n          setHasStarted={setHasStarted}\n          config={config}\n          setConfig={setConfig}\n        />\n      );\n    }\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: colours.quinary,\n        width: \"100vw\",\n        height: \"100vh\"\n      }}\n    >\n      {renderScreen()}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.github.com/taq2/hindi-flashcards\"\n      >\n        <FaGithub\n          style={{\n            position: \"fixed\",\n            bottom: 10,\n            right: 10,\n            color: \"black\",\n            fontSize: \"3rem\"\n          }}\n        />\n      </a>\n    </div>\n  );\n}\n"],"sourceRoot":""}